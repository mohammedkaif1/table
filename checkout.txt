package in.co.vwit.engineering.resourceManagement.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import in.co.vwit.engineering.resourceManagement.Doa.EmployeeContingentRepository;
import in.co.vwit.engineering.resourceManagement.Doa.HiringStrategyHiringRepository;
import in.co.vwit.engineering.resourceManagement.Doa.HiringStrategyProjectRepository;
import in.co.vwit.engineering.resourceManagement.entity.HiringStrategyCheckoutContingentDto;
import in.co.vwit.engineering.resourceManagement.entity.HiringStrategyHiringDetails;
import in.co.vwit.engineering.resourceManagement.entity.HiringStrategyProjectDetails;
import in.co.vwit.engineering.resourceManagement.entity.MappingEmployeeDataDTO;
import in.co.vwit.engineering.resourceManagement.entity.RotationEmployeesDto;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class HiringStrategyHiringService {

	@Autowired
	private EmployeeContingentRepository repository;
	@Autowired
	private static HiringStrategyHiringRepository repo1;
	@Autowired
	private static HiringStrategyProjectRepository repo2;
	
	public List<HiringStrategyCheckoutContingentDto> getHiring(List<Integer> selectedEmpIDs) {
		
		List<HiringStrategyCheckoutContingentDto>basicDetails= repository.findhiringcheckoutcontingent(selectedEmpIDs);;
		List<Object[]>skillsData=this.repository.fetchEmployeeSkills();
		Map<Integer,List<String>> skillMap=skillsData.stream().collect(Collectors.groupingBy(data->(Integer)data[0],Collectors.mapping(data->(String)data[1], Collectors.toList())));
		basicDetails.forEach(dto->dto.setSkills(skillMap.get(dto.getEmployeeId())));
		System.out.println(basicDetails);
		return basicDetails;
	}
	

	public static  HiringStrategyProjectDetails map(Integer projectid, List<MappingEmployeeDataDTO> employeedata) {
		// TODO Auto-generated method stub
		Optional<HiringStrategyProjectDetails> hp = repo2.findById(projectid);
		if(!hp.isPresent())
		{
			throw new RuntimeException("Opportunity not found");
		}
		HiringStrategyProjectDetails hp1=hp.get();
		
		for(MappingEmployeeDataDTO data:employeedata){
			HiringStrategyHiringDetails h1=repo1.findById(data.getEmpId()).orElseThrow(()->new RuntimeException("Employee not found"));
			h1.setProid(hp1);
			h1.setEmployeeId(data.getEmpId());
			h1.setCategory(data.getStatus());
			repo1.save(h1);
			
			
		};
		return hp1;
		
		
	}
	
	//public HiringStrategyHiringDetails getHiringbyProjectID(int projectID) {
		//return repository.findByProjectID(projectID);
	//}
	
	//public void insertHiringData(HiringStrategyHiringDetails h) {
		//repository.save(h);
	//}

	
	
}
